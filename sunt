#!/bin/bash
# by Dominik Stanis≈Çaw Suchora <suchora.dominik7@gmail.com>
# License: GNU GPLv3

IFS=$'\n'
shopt -s extglob

declare force all onremote compress destination_length file_path id
declare -a destination

die() {
    exit_code="$1"
    shift
    echo "$@" > /dev/stderr
    exit "$exit_code"
}

usage() {
    NAME="$(basename "$0")"
    printf "%s [COMMAND] [OPTION]... [FILE]\ncreate and manage file backups through ssh\n\n" "$NAME"
    printf "Commands:\n  l, list\t\tprints out index file\n"
    printf "  a, add\t\tadds files to index\n"
    printf "  d, delete\t\tdeletes files from index, leaving files intact\n"
    printf "  i, index\t\tuploads index file to the remote\n"
    printf "  u, upload\t\tuploads files to the remote\n"
    printf "  au, add-upload\tadds files to database and uploads them to the remote\n"
    printf "  r, restore\t\trestores files from the remote\n\n"
    printf "Options:\n  -f\tallow overwriting files\n"
    printf "  -a\taffect every file in index (only for upload and restore)\n"
    printf "  -r\tdelete files on remote\n"
    printf "  -c\tadd compress flag (only for add)\n\n"
    printf "Variables:\n  SUNT_INDEX\t\tlocation of index file\n"
    printf "  SUNT_ENCRYPT\t\tcommand used for encrypting\n"
    printf "  SUNT_DECRYPT\t\tcommand used for decrypting\n"
    printf "  SUNT_COMPRESS\t\tcommand used for compression\n"
    printf "  SUNT_DECOMPRESS\tcommand used for decompression\n"
    printf "  SUNT_HASH\t\tcommand used for translating file names\n"
    printf "  SUNT_DEST\t\tfour segments specifying name,connection command,remote path,local path separated by colon (can be repeated)\n\n"
    printf "By default %s tries to read variables from ~/.config/sunt file\n" "$NAME"
    exit 0
}

file_check() {
    local -r options="$1"
    shift
    while [ "$#" -gt 0 ]
    do
        for i in $(sed 's/\(.\)/\1\n/g' <<< "$options")
        do
            case "$i" in 
                e) #does not exists then exit
                    [ -e "$1" ] || die 1 "$1 does not exits";;
                E) #does not exists then create
                    if [ ! -e "$1" ]
                    then
                        touch "$1" || exit 1
                        echo "created $1"
                    fi;;
                f) #is a file
                    [ -f "$1" ] || die 1 "$1 is not a file";;
                d) #is a directory
                    [ -d "$1" ] || die 1 "$1 is not a directory";;
                p) #is a named pipe
                    [ -p "$1" ] || die 1 "$1 is not a named pipe";;
                h) #is a named link
                    [ -h "$1" ] || die 1 "$1 is not a named link";;
                S) #is a socket
                    [ -S "$1" ] || die 1 "$1 is not a socket";;
                s) #is empty
                    [ -s "$1" ] || die 1 "$1 is empty";;
                r) #read access
                    [ -r "$1" ] || die 1 "$1 reading permission denied";;
                w) #write access
                    [ -w "$1" ] || die 1 "$1 writing permission denied";;
                x) #exution access
                    [ -x "$1" ] || die 1 "$1 executing permission denied";;
            esac
        done
        shift
    done
}

var_by_name() {
    eval "echo \"\$$1\""
}

var_check() {
    local val
    while [ "$#" -gt 0 ]
    do
        val="$(var_by_name "$1")"
        [ -z "$val" ] && die 1 "$1 is not set"
        shift
    done
}

varfile_check() {
    local -r options="$1"
    shift
    [ $# -eq 0 ] && return
    while [ "$#" -gt 0 ]
    do
        val="$(var_by_name "$1")"
        [ -z "$val" ] && die 1 "$1 is not set"
        file_check "$options" "$val"
        shift
    done
}

f_list() {
    cat "$SUNT_INDEX"
}

find_path() {
    local -r path="$(realpath "$1")"
    local t
    for ((i=0;i<destination_length;i+=4))
    do
        t="${destination[i+3]//$'\n'}"
        export file_path="${path#$t/}"
        [ "$file_path" != "$path" ] && { id="$i"; break; }
    done
}

f_add() {
    local name_hash dir options t
    while [ "$#" -gt 0 ]
    do
        file_check 'erw' "$1"
        find_path "$1"
        [ -z "$id" ] && { echo "$1 is not in $SUNT_DEST aka SUNT_DEST" >/dev/stderr; shift continue; }
        t="$(echo -n "$file_path" | $SUNT_HASH)"
        name_hash="${t%% *}"
        [ -d "$1" ] && dir=1 || \
            [ -f "$1" ] || { echo "$1 is not a file or directory" >/dev/stderr; shift; continue; }
        [ -n "$dir" ] && options="d" || options="f"
        [ -n "$compress" ] && options="${options}c"
        [ -z "$force" ] && grep -q '^'"$name_hash"$'\t' "$SUNT_INDEX" && { echo "$1 is already declared" >/dev/stderr; shift; continue; }
        sed -i "/^$name_hash\t/d" "$SUNT_INDEX"
        echo "$name_hash"$'\t'"$file_path"$'\t'"${destination[id]//$'\n'}"$'\t'"$options" >> "$SUNT_INDEX" && echo "added $1"
        shift
    done
}

f_delete() {
    local t name_hash
    while [ "$#" -gt 0 ]
    do
        find_path "$1"
        [ -z "$id" ] && { echo "$1 is not in $SUNT_DEST aka SUNT_DEST" >/dev/stderr; shift; continue; }
        t="$(echo -n "$file_path" | $SUNT_HASH)"
        name_hash="${t%% *}"
        if grep -q '^'"$name_hash"$'\t' "$SUNT_INDEX"
        then
            sed -i "/^$name_hash\t/d" "$SUNT_INDEX"
            [ -n "$onremote" ] && eval "${destination[id+1]//$'\n'} \"rm \"${destination[id+2]//$'\n'}/$name_hash\"\""
        else
            echo "$1 not found" >/dev/stderr
        fi
        shift
    done
}

f_restore() {
    local t name_hash com
    while [ "$#" -gt 0 ]
    do
        find_path "$1"
        [ -z "$id" ] && { echo "$1 is not in $SUNT_DEST aka SUNT_DEST" >/dev/stderr; shift; continue; }
        t="$(echo -n "$file_path" | $SUNT_HASH)"
        name_hash="${t%% *}"
        line="$(grep '^'"$name_hash"$'\t' "$SUNT_INDEX")"
        [ -z "$line" ] && { echo "$1 not found" >/dev/stderr; shift; continue; }
        [ -z "$force" ] && [ -e "$1" ] && { echo "$1 already exists" >/dev/stderr; shift; continue; }
        eval "${destination[id+1]//$'\n'} \"[ -e \"${destination[id+2]//$'\n'}/$name_hash\" ]\"" || { echo "$1 not found in storage" >/dev/stderr; shift; continue; }
        com="${destination[id+1]//$'\n'} \"cat ${destination[id+2]//$'\n'}/$name_hash\" | $SUNT_DECRYPT"
        case "$(cut -d $'\t' -f4 <<< "$line")" in
            f) eval "$com > \"${destination[id+3]//$'\n'}/$file_path\"";;
            fc) eval "$com | $SUNT_DECOMPRESS > \"${destination[id+3]//$'\n'}/$file_path\"";;
            d) eval "$com | tar -C \"\$(dirname \"${destination[id+3]//$'\n'}/$file_path\")\" -x";;
            dc) eval "$com | $SUNT_DECOMPRESS | tar -C \"\$(dirname \"${destination[id+3]//$'\n'}/$file_path\")\" -x";;
        esac
        shift
    done
}

f_upload() {
    local t name_hash com
    while [ "$#" -gt 0 ]
    do
        find_path "$1"
        [ -z "$id" ] && { echo "$1 is not in $SUNT_DEST aka SUNT_DEST" >/dev/stderr; shift; continue; }
        t="$(echo -n "$file_path" | $SUNT_HASH)"
        name_hash="${t%% *}"
        line="$(grep '^'"$name_hash"$'\t' "$SUNT_INDEX")"
        [ -z "$line" ] && { echo "$1 not found" >/dev/stderr; shift; continue; }
        [ -z "$force" ] &&  eval "${destination[id+1]//$'\n'} \"[ -e \"${destination[id+2]//$'\n'}/$name_hash\" ]\"" && { echo "$1 already exists" >/dev/stderr; shift; continue; }
        case "$(cut -d $'\t' -f4 <<< "$line")" in
            f) com="cat \"${destination[id+3]//$'\n'}/$file_path\"";;
            fc) com="cat \"${destination[id+3]//$'\n'}/$file_path\" | $SUNT_COMPRESS";;
            d) com="tar -c -C \"\$(dirname \"${destination[id+3]//$'\n'}/$file_path\")\" \"\$(basename \"$file_path\")\"";;
            dc) com="tar -c -C \"\$(dirname \"${destination[id+3]//$'\n'}/$file_path\")\" \"\$(basename \"$file_path\")\" | $SUNT_COMPRESS";;
        esac
        eval "$com | $SUNT_ENCRYPT | ${destination[id+1]//$'\n'} \"cat > ${destination[id+2]//$'\n'}/$name_hash\"" && echo "uploaded $1"
        shift
    done
}

f_au() {
    f_add "$@"
    f_upload "$@"
}

f_index() {
    for ((i=0;i<destination_length;i+=4))
    do
        eval "$SUNT_COMPRESS < \"$SUNT_INDEX\" | $SUNT_ENCRYPT | ${destination[i+1]//$'\n'} \"cat > ${destination[i+2]//$'\n'}/index.gpg\""
    done
}

. ~/.config/sunt &>/dev/null

varfile_check 'Efrw' SUNT_INDEX
var_check SUNT_ENCRYPT SUNT_DECRYPT SUNT_COMPRESS SUNT_DECOMPRESS SUNT_HASH SUNT_DEST

[ "$#" -eq 0 ] && usage
case "$1" in
    u|upload) func="f_upload";;
    a|add) func="f_add";;
    au|add-upload) func="f_au";;
    r|restore) func="f_restore";;
    d|delete) func="f_delete";;
    l|list) func="f_list";;
    i|index) func="f_index";;
esac
[ -z "$func" ] && die 1 "$1 incorrect command"
shift

while getopts 'farc' o
do
    case "$o" in
        f) force='1';;
        a) all='1';;
        r) onremote='1';;
        c) compress='1';;
        *) usage;;
    esac
done
shift "$((OPTIND-1))"

mapfile -t -d, destination <<< "$SUNT_DEST"
[ "$((${#destination[@]}%4))" -ne '0' ] && die 1 "invalid SUNT_DEST"
destination_length="${#destination[@]}"

#if [ -n "$all" ] && [ "$func" = "f_upload" -o "$func" = "f_restore" ]
#then
#    $func "$(cut -d';' -f2 < "$SUNT_INDEX" | sed 's,^,'"$SUNT_PATH/"',')"
#else
#    $func "$@"
#fi
$func "$@"
